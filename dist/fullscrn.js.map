{"version":3,"file":"fullscrn.js","sources":["../src/fullscrn.ts"],"sourcesContent":["type EventName = 'change' | 'error'\ntype FullscrnEventHandler = (event: Event) => void\ntype FullscrnUnsubscribe = () => void\n\ninterface Fullscrn {\n  /**\n   * The element currently in fullscreen, otherwise `null`.\n   */\n  readonly element: Element | null\n\n  /**\n   * Whether fullscreen is active.\n   */\n  readonly isFullscreen: boolean\n\n  /**\n   * Whether you are allowed to enter fullscreen. If your page is inside an\n   * `<iframe>` you will need to add a `allowfullscreen` attribute\n   * (+ `webkitallowfullscreen`).\n   *\n   * @example\n   *```js\n   * if (fullscrn.isEnabled) {\n   *   fullscrn.request()\n   * }\n   *```\n   */\n  readonly isEnabled: boolean\n\n  /**\n   * Make an element fullscreen.\n   *\n   * If your page is inside an `<iframe>` you will need to add a\n   * `allowfullscreen` attribute (+ `webkitallowfullscreen`).\n   *\n   * Keep in mind that the browser will only enter fullscreen when initiated\n   * by user events like click, touch, key.\n   *\n   * @param element - Default is `<html>`. If called with another element\n   *  than the currently active, it will switch to that if it's a decendant.\n   * @param options - [`FullscreenOptions`](https://developer.mozilla.org/en-US/docs/Web/API/FullscreenOptions).\n   * @returns A promise that resolves after the element enters fullscreen.\n   *\n   * @example\n   *```js\n   * // Fullscreen the page\n   * document.getElementById('button-id').addEventListener('click', () => {\n   *   fullscrn.request()\n   * })\n   *\n   * // Fullscreen an element\n   * document.getElementById('button-id').addEventListener('click', evt => {\n   *   fullscrn.request(evt.currentTarget.parentElement)\n   * })\n   *\n   * // Fullscreen an element with options\n   * document.getElementById('button-id').addEventListener('click', evt => {\n   *   fullscrn.request(evt.currentTarget.parentElement, { navigationUI: 'hide' })\n   * })\n   *```\n   */\n  request(element?: Element, options?: FullscreenOptions): Promise<void>\n\n  /**\n   * Brings you out of fullscreen.\n   *\n   * @returns A promise that resolves after the element exits fullscreen.\n   */\n  exit(): Promise<void>\n\n  /**\n   * Requests fullscreen if not active, otherwise exits.\n   *\n   * @param element - Default is `<html>`. If called with another element than the currently active, it will switch to that if it's a decendant.\n   * @param options - [`FullscreenOptions`](https://developer.mozilla.org/en-US/docs/Web/API/FullscreenOptions).\n   * @returns A promise that resolves after the element enters/exits fullscreen.\n   *\n   * @example\n   *```js\n   * // Toggle fullscreen on a image with jQuery\n   * $('img').on('click', evt => {\n   *   fullscrn.toggle(evt.target)\n   * })\n   *```\n   */\n  toggle(element?: Element, options?: FullscreenOptions): Promise<void>\n\n  /**\n   * An event handler for the `fullscreenchange` event that's sent to\n   * a document when that document is placed into full-screen mode, or\n   * when that document exits full-screen mode.\n   *\n   * This handler is called only when the entire document is presented in\n   * full-screen mode.\n   *\n   * @example\n   *```js\n   * const remover = fullscrn.onchange(() => {\n   *   console.log('Am I fullscreen?', fullscrn.isFullscreen ? 'Yes' : 'No')\n   * })\n   *\n   * // Later, you can remove the listener by calling `remover`\n   * remover()\n   *```\n   * ---\n   * If you are using React. the removal is automatic if you return the result\n   * of `onchange` to the `useEffect` hook:\n   *```jsx\n   * useEffect(\n   *   () =>\n   *     fullscrn.onchange(() => {\n   *       console.log('Am I fullscreen?', fullscrn.isFullscreen ? 'Yes' : 'No')\n   *     }),\n   *   []\n   * )\n   *```\n   */\n  onchange(callback: FullscrnEventHandler): FullscrnUnsubscribe\n\n  /**\n   * An event handler for the `fullscreenerror` event that gets sent to\n   * a document when an error occurs while trying to enable or disable\n   * full-screen mode for the entire document.\n   *\n   * @example\n   *```js\n   * // Register the error handler with onerror and store the result (`remover`).\n   * // Later, you can remove the listener by calling `remover()`.\n   * //\n   * const remover = fullscrn.onerror(event => {\n   *   console.error('Failed to enable fullscreen', event)\n   * })\n   *```\n   */\n  onerror(callback: FullscrnEventHandler): FullscrnUnsubscribe\n}\n\nconst enum FnIx {\n  requestFullscreen,\n  exitFullscreen,\n  fullscreenElement,\n  fullscreenEnabled,\n  fullscreenchange,\n  fullscreenerror,\n}\n\nexport const fullscrn: Fullscrn = (function () {\n  //\n  const document: Document =\n    (typeof window !== 'undefined' && window.document) || ({} as any)\n\n  const fn = [\n    [\n      'requestFullscreen',\n      'exitFullscreen',\n      'fullscreenElement',\n      'fullscreenEnabled',\n      'fullscreenchange',\n      'fullscreenerror',\n    ],\n    // New WebKit\n    [\n      'webkitRequestFullscreen',\n      'webkitExitFullscreen',\n      'webkitFullscreenElement',\n      'webkitFullscreenEnabled',\n      'webkitfullscreenchange',\n      'webkitfullscreenerror',\n    ],\n  ].find(v => document[v[1]])\n\n  if (!fn) {\n    /*\n      There's no Fullscreen support, returns a noop instance of Fullscrn\n    */\n    const _noopP = () => Promise.resolve()\n    const _noopV = () => void 0\n    const _noopZ = () => _noopV\n\n    return {\n      element: null,\n      isEnabled: false,\n      isFullscreen: false,\n      request: _noopP,\n      toggle: _noopP,\n      exit: _noopP,\n      onchange: _noopZ,\n      onerror: _noopZ,\n      _off: _noopV,\n    }\n  }\n\n  const fullscreenElement = fn[FnIx.fullscreenElement]\n  const fullscreenEnabled = fn[FnIx.fullscreenEnabled]\n  const requestFullscreen = fn[FnIx.requestFullscreen]\n  const exitFullscreen = fn[FnIx.exitFullscreen]\n\n  const eventNames = {\n    change: fn[FnIx.fullscreenchange],\n    error: fn[FnIx.fullscreenerror],\n  }\n\n  // Fullscrn instance to fill with the methods in the context\n  const _fullscrn = {\n    //\n    get element() {\n      return document[fullscreenElement] as Element | null\n    },\n\n    get isFullscreen() {\n      return Boolean(document[fullscreenElement])\n    },\n\n    get isEnabled() {\n      return Boolean(document[fullscreenEnabled])\n    },\n  }\n\n  /**\n   * Remove a previously registered event listener.\n   * @private\n   */\n  const _off = (event: EventName, callback: FullscrnEventHandler) => {\n    const eventName = eventNames[event]\n    eventName && document.removeEventListener(eventName, callback, false)\n  }\n\n  const onchange = (callback: FullscrnEventHandler) => {\n    document.addEventListener(eventNames.change, callback, false)\n    return () => _off('change', callback)\n  }\n\n  const onerror = (callback: FullscrnEventHandler) => {\n    document.addEventListener(eventNames.error, callback, false)\n    return () => _off('error', callback)\n  }\n\n  const request = (element: Element, options: FullscreenOptions) =>\n    new Promise<void>((resolve, reject) => {\n      //\n      const onFullScreenEntered = () => {\n        _off('change', onFullScreenEntered)\n        resolve()\n      }\n\n      onchange(onFullScreenEntered)\n\n      element ||= document.documentElement\n\n      const promise = element[requestFullscreen](options)\n\n      if (promise instanceof Promise) {\n        promise.then(onFullScreenEntered).catch(reject)\n      }\n    })\n\n  const exit = () =>\n    new Promise<void>((resolve, reject) => {\n      //\n      if (!_fullscrn.isFullscreen) {\n        resolve()\n        return\n      }\n\n      const onFullScreenExit = () => {\n        _off('change', onFullScreenExit)\n        resolve()\n      }\n\n      onchange(onFullScreenExit)\n\n      const promise = document[exitFullscreen]()\n\n      if (promise instanceof Promise) {\n        promise.then(onFullScreenExit).catch(reject)\n      }\n    })\n\n  const toggle = (element: Element, options: FullscreenOptions) =>\n    _fullscrn.isFullscreen ? exit() : request(element, options)\n\n  return Object.assign(_fullscrn, {\n    request,\n    exit,\n    toggle,\n    onchange,\n    onerror,\n    _off,\n  })\n})()\n"],"names":[],"mappings":"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"}